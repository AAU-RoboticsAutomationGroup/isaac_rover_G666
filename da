[1mdiff --git a/isaacgymenvs/image_projection.py b/isaacgymenvs/image_projection.py[m
[1mnew file mode 100644[m
[1mindex 0000000..d76c770[m
[1m--- /dev/null[m
[1m+++ b/isaacgymenvs/image_projection.py[m
[36m@@ -0,0 +1,75 @@[m
[32m+[m[32mimport numpy as np[m
[32m+[m[32mimport math[m
[32m+[m[32mimport matplotlib.pyplot as plt[m
[32m+[m[32mimport matplotlib.image as mpimg #not used[m
[32m+[m[32mimport mplot3d_dragger # not used[m
[32m+[m[32mfrom mpl_toolkits.mplot3d import Axes3D # This bitch might not work. Uninstall matplotlib, install --||--, and upgrade --||-- should work[m
[32m+[m[32mfrom skimage import transform[m
[32m+[m[32mfrom skimage.io import imread, imshow[m
[32m+[m
[32m+[m[32m###############################################################[m
[32m+[m[32m# Image transformation[m
[32m+[m
[32m+[m[32mx_rot = 119 #placed in 61 degrees than 29+90 =119[m
[32m+[m[32my_rot = 0[m[41m [m
[32m+[m[32mz_rot = 0[m
[32m+[m
[32m+[m[32momega = math.radians(x_rot)[m
[32m+[m[32mtheta = math.radians(y_rot)[m
[32m+[m[32mkappa = math.radians(z_rot)[m
[32m+[m
[32m+[m[32mtx = 0 # unsure of the unit[m
[32m+[m[32mty = 150 # mm[m
[32m+[m[32mtz = 100 # mm[m
[32m+[m
[32m+[m[32m# load point cloud from exomy.py[m
[32m+[m[32mimg = imread('/home/gymuser/isaac_rover_privatRep/envs/tasks/color_cam.png')[m
[32m+[m
[32m+[m[32m#img = np.array([ [-1, -1, 1, 0], [-1, -1, 3, 0], [-1, 1, 1, 0], [-1, 1, 3, 0], [1, -1, 1, 0], [1, -1, 3, 0], [1, 1, 1, 0], [1, 1, 3, 0] ]) # test[m
[32m+[m
[32m+[m[32m###############################################################[m
[32m+[m[32m# Rotation and translation matrices[m
[32m+[m
[32m+[m[32mrotMat_x = np.array([[1, 0, 0, 0],[m
[32m+[m[32m                    [0, math.cos(omega), math.sin(omega), 0],[m
[32m+[m[32m                    [0, -(math.sin(omega)), math.cos(omega), 0],[m
[32m+[m[32m                    [0, 0, 0, 1]])[m
[32m+[m[32mrotMat_y = np.array([ [math.cos(theta), 0, -(math.sin(theta)), 0],[m
[32m+[m[32m                    [0, 1, 0, 0],[m
[32m+[m[32m                    [math.sin(theta), 0, math.cos(theta), 0],[m
[32m+[m[32m                    [0, 0, 0, 1]])[m
[32m+[m[32mrotMat_z = np.array([[math.cos(kappa), math.sin(kappa), 0, 0],[m
[32m+[m[32m                    [-(math.sin(kappa)), math.cos(kappa), 0, 0],[m
[32m+[m[32m                    [0, 0, 1, 0],[m
[32m+[m[32m                    [0, 0, 0, 1]])[m
[32m+[m
[32m+[m[32mtrans_mat = np.array([  [1, 0, 0, tx],[m
[32m+[m[32m                        [0, 1, 0, ty],[m
[32m+[m[32m                        [0, 0, 1, tz],[m
[32m+[m[32m                        [0, 0, 0, 1]])[m
[32m+[m
[32m+[m[32m###############################################################[m
[32m+[m[32m# Compute homography matrix and apply to input[m
[32m+[m[32mprojection_mat = np.matmul(np.matmul(np.matmul(rotMat_x, rotMat_y), rotMat_z), trans_mat)[m
[32m+[m[32mproj_trans = transform.AffineTransform(matrix=projection_mat, dimensionality=3)[m
[32m+[m[32mtf_img = img.dot(proj_trans)[m[41m  [m
[32m+[m
[32m+[m[32m###############################################################[m
[32m+[m[32m# Plot camera view and top/transformed view[m
[32m+[m[32mfig1 = plt.figure()[m
[32m+[m[32max1 = fig1.gca(projection='3d')[m
[32m+[m[32max1.scatter(tf_img[:, 0], tf_img[:,1], tf_img[:,2])[m
[32m+[m[32max1.set_title('Birds view')[m
[32m+[m[32max1.set_xlabel("x axis")[m
[32m+[m[32max1.set_ylabel("y axis")[m
[32m+[m[32max1.set_zlabel("z axis")[m
[32m+[m
[32m+[m[32mfig = plt.figure()[m
[32m+[m[32max = fig.gca(projection='3d')[m
[32m+[m[32max.scatter(img[:, 0], img[:,1], img[:,2])[m
[32m+[m[32max.set_title('Camera Plane')[m
[32m+[m[32max.set_xlabel("x axis")[m
[32m+[m[32max.set_ylabel("y axis")[m
[32m+[m[32max.set_zlabel("z axis")[m
[32m+[m
[32m+[m[32mplt.show()[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/isaacgymenvs/virt_cam_working.py b/isaacgymenvs/virt_cam_working.py[m
[1mnew file mode 100644[m
[1mindex 0000000..2f23eb7[m
[1m--- /dev/null[m
[1m+++ b/isaacgymenvs/virt_cam_working.py[m
[36m@@ -0,0 +1,472 @@[m
[32m+[m
[32m+[m[32mimport math[m
[32m+[m[32mfrom cmath import inf[m
[32m+[m[32mimport numpy as np[m
[32m+[m[32mimport os[m
[32m+[m[32mimport torch[m
[32m+[m[32mimport xml.etree.ElementTree as ET[m
[32m+[m
[32m+[m[32mfrom utils.torch_jit_utils import *[m
[32m+[m[32mfrom tasks.base.vec_task import VecTask[m
[32m+[m[32m#from utils.kinematics import Rover[m
[32m+[m
[32m+[m[32mfrom isaacgym import gymutil, gymtorch, gymapi[m
[32m+[m[32mimport open3d as o3d[m
[32m+[m
[32m+[m
[32m+[m[32m########### Error received #######[m
[32m+[m[32m## ImportError: PyTorch was imported before isaacgym modules.  Please import torch after isaacgym modules.[m
[32m+[m[32m# Cannot implement a artificial camera in exomy version scripts.[m[41m [m
[32m+[m[32m# However, this specific script has worked before, so the implementation of a camera in line 265 is possible.[m
[32m+[m
[32m+[m
[32m+[m[32mclass Exomy(VecTask):[m
[32m+[m
[32m+[m[32m    def __init__(self, cfg, sim_device, graphics_device_id, headless):[m
[32m+[m
[32m+[m[32m        self.cfg = cfg[m
[32m+[m[32m        #self.Kinematics = Rover()[m
[32m+[m[32m        self.max_episode_length = self.cfg["env"]["maxEpisodeLength"][m
[32m+[m[32m        self.cfg["env"]["numObservations"] = 13[m
[32m+[m[32m        self.cfg["env"]["numActions"] = 12[m
[32m+[m[32m        self.max_effort_vel = math.pi[m
[32m+[m[32m        self.max_effort_pos = math.pi/2[m
[32m+[m[32m        super().__init__(config=self.cfg, sim_device=sim_device, graphics_device_id=graphics_device_id, headless=headless)[m
[32m+[m[32m        # Retrieves buffer for Actor root states.[m
[32m+[m[32m        # position([0:3]), rotation([3:7]), linear velocity([7:10]), and angular velocity([10:13])[m
[32m+[m[32m        # Buffer has shape (num_environments, num_actors * 13).[m
[32m+[m[32m        dofs_per_env = 17[m
[32m+[m
[32m+[m[32m        self.root_tensor = self.gym.acquire_actor_root_state_tensor(self.sim)[m
[32m+[m[32m        self.dof_state_tensor = self.gym.acquire_dof_state_tensor(self.sim)[m
[32m+[m[41m        [m
[32m+[m[32m        # Convert buffer to vector, one is created for the robot and for the marker.[m
[32m+[m[32m        vec_root_tensor = gymtorch.wrap_tensor(self.root_tensor).view(self.num_envs, 2, 13)[m
[32m+[m[32m        vec_dof_tensor = gymtorch.wrap_tensor(self.dof_state_tensor).view(self.num_envs, dofs_per_env, 2)[m
[32m+[m[32m        #print(vec_dof_tensor)[m
[32m+[m[32m        # Position vector for robot[m
[32m+[m[32m        self.root_states = vec_root_tensor[:, 0, :][m
[32m+[m[32m        self.root_positions = self.root_states[:, 0:3][m
[32m+[m[32m        # Rotation of robot[m
[32m+[m[32m        self.root_quats = self.root_states[:, 3:7][m
[32m+[m[32m        # Linear Velocity of robot[m
[32m+[m[32m        self.root_linvels = self.root_states[:, 7:10][m
[32m+[m[32m        # Angular Velocity of robot[m
[32m+[m[32m        self.root_angvels = self.root_states[:, 10:13][m
[32m+[m
[32m+[m
[32m+[m[32m        self.target_root_positions = torch.zeros((self.num_envs, 3), device=self.device, dtype=torch.float32)[m
[32m+[m[32m        self.target_root_positions[:, 2] = 0[m
[32m+[m
[32m+[m[32m        #print(self.target_root_positions)[m
[32m+[m
[32m+[m[32m        # Marker position[m
[32m+[m[32m        self.marker_states = vec_root_tensor[:, 1, :][m
[32m+[m[32m        self.marker_positions = self.marker_states[:, 0:3][m
[32m+[m
[32m+[m
[32m+[m[32m        # self.dof_states = vec_dof_tensor[m
[32m+[m[32m        # self.dof_positions = vec_dof_tensor[..., 0][m
[32m+[m[32m        # self.dof_velocities = vec_dof_tensor[..., 1][m
[32m+[m[41m        [m
[32m+[m[32m        dof_state_tensor = self.gym.acquire_dof_state_tensor(self.sim)[m
[32m+[m[32m        self.dof_states = gymtorch.wrap_tensor(dof_state_tensor)[m
[32m+[m[32m        self.dof_positions = self.dof_states.view(self.num_envs, self.num_dof, 2)[..., 0][m
[32m+[m[32m        self.dof_velocities = self.dof_states.view(self.num_envs, self.num_dof, 2)[..., 1][m
[32m+[m
[32m+[m
[32m+[m[32m        self.gym.refresh_actor_root_state_tensor(self.sim)[m
[32m+[m[32m        self.gym.refresh_dof_state_tensor(self.sim)[m
[32m+[m
[32m+[m[32m        self.initial_root_states = self.root_states.clone()[m
[32m+[m[32m        self.initial_dof_states = self.dof_states.clone()[m
[32m+[m
[32m+[m[41m        [m
[32m+[m[32m        # Control tensor[m
[32m+[m[32m        self.all_actor_indices = torch.arange(self.num_envs * 2, dtype=torch.int32, device=self.device).reshape((self.num_envs, 2))[m
[32m+[m
[32m+[m[41m        [m
[32m+[m[32m        cam_pos = gymapi.Vec3(-1.0, -0.6, 0.8)[m
[32m+[m[32m        cam_target = gymapi.Vec3(1.0, 1.0, 0.15)[m
[32m+[m[32m        self.gym.viewer_camera_look_at(self.viewer, None, cam_pos, cam_target)[m
[32m+[m
[32m+[m[32m        self.frame_count = 0 #used for pointcloud[m
[32m+[m
[32m+[m[32m    def create_sim(self):[m
[32m+[m[32m        # implement sim set up and environment creation here[m
[32m+[m[32m        #    - set up-axis[m
[32m+[m[32m        self.sim_params.up_axis = gymapi.UP_AXIS_Z[m
[32m+[m[41m        [m
[32m+[m[41m        [m
[32m+[m[32m        #    - set up gravity[m
[32m+[m[32m        self.sim_params.gravity.x = 0[m
[32m+[m[32m        self.sim_params.gravity.y = 0[m
[32m+[m[32m        self.sim_params.gravity.z = -3.721[m[41m  [m
[32m+[m[32m        #    - call super().create_sim with device args (see docstring)[m
[32m+[m[32m        self.sim = super().create_sim(self.device_id, self.graphics_device_id, self.physics_engine, self.sim_params)[m
[32m+[m
[32m+[m[32m        #    - set time step length[m
[32m+[m[32m        self.dt = self.sim_params.dt[m
[32m+[m[32m        #    - setup asset[m
[32m+[m[32m        self._create_exomy_asset()[m
[32m+[m[32m        #    - create ground plane[m
[32m+[m[32m        self._create_ground_plane()[m
[32m+[m[32m        #    - set up environments[m
[32m+[m[32m        self._create_envs(self.num_envs, self.cfg["env"]['envSpacing'], int(np.sqrt(self.num_envs)))[m
[32m+[m
[32m+[m[41m        [m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    def _create_exomy_asset(self):[m
[32m+[m[32m        pass[m
[32m+[m
[32m+[m
[32m+[m[32m    def _create_ground_plane(self):[m
[32m+[m[32m        plane_params = gymapi.PlaneParams()[m
[32m+[m[32m        # set the nroaml force to be z dimension[m
[32m+[m[32m        plane_params.normal = gymapi.Vec3(0.0,0.0,1.0)[m
[32m+[m[32m        self.gym.add_ground(self.sim, plane_params)[m
[32m+[m[41m    [m
[32m+[m[32m    def set_targets(self, env_ids):[m
[32m+[m[32m        num_sets = len(env_ids)[m
[32m+[m[32m        # set target position randomly with x, y in (-2, 2) and z in (1, 2)[m
[32m+[m[32m        #print("ASDO:JNHSAOJPNHDJNO:HASDJUOIP")[m
[32m+[m[32m        self.target_root_positions[env_ids, 0:2] = (torch.rand(num_sets, 2, device=self.device) * 7) - 3.5[m
[32m+[m[32m        self.target_root_positions[env_ids, 2] = 0[m
[32m+[m[32m        self.marker_positions[env_ids] = self.target_root_positions[env_ids][m
[32m+[m[32m        # copter "position" is at the bottom of the legs, so shift the target up so it visually aligns better[m
[32m+[m[32m        #self.marker_positions[env_ids, 2] += 0.4[m
[32m+[m[32m        actor_indices = self.all_actor_indices[env_ids, 1].flatten()[m
[32m+[m[32m        self.gym.set_actor_root_state_tensor_indexed(self.sim,self.root_tensor, gymtorch.unwrap_tensor(actor_indices), num_sets)[m
[32m+[m
[32m+[m[32m        return actor_indices[m
[32m+[m
[32m+[m
[32m+[m[32m    def _create_envs(self,num_envs,spacing, num_per_row):[m
[32m+[m[32m       # define plane on which environments are initialized[m
[32m+[m[32m        lower = gymapi.Vec3(0.5 * -spacing, -spacing, 0.0)[m
[32m+[m[32m        upper = gymapi.Vec3(0.5 * spacing, spacing, spacing)[m
[32m+[m
[32m+[m[32m        asset_root = "../assets"[m
[32m+[m[32m        exomy_asset_file = "urdf/exomy_model/urdf/exomy_model.urdf"[m
[32m+[m[41m        [m
[32m+[m[32m        # if "asset" in self.cfg["env"]:[m
[32m+[m[32m        #     asset_root = os.path.join(os.path.dirname(os.path.abspath(__file__)), self.cfg["env"]["asset"].get("assetRoot", asset_root))[m
[32m+[m[32m        #     asset_file = self.cfg["env"]["asset"].get("assetFileName", asset_file)[m
[32m+[m
[32m+[m[32m        # asset_path = os.path.join(asset_root, asset_file)[m
[32m+[m[32m        # asset_root = os.path.dirname(asset_path)[m
[32m+[m[32m        # asset_file = os.path.basename(asset_path)[m
[32m+[m
[32m+[m[32m        asset_options = gymapi.AssetOptions()[m
[32m+[m[32m        asset_options.fix_base_link = False[m
[32m+[m[32m        asset_options.disable_gravity = False[m
[32m+[m[32m        asset_options.armature = 0.01[m
[32m+[m[32m        # use default convex decomposition params[m
[32m+[m[32m        asset_options.vhacd_enabled = False[m
[32m+[m
[32m+[m[32m        print("Loading asset '%s' from '%s'" % (exomy_asset_file, asset_root))[m
[32m+[m[32m        exomy_asset = self.gym.load_asset(self.sim, asset_root, exomy_asset_file, asset_options)[m
[32m+[m[32m        self.num_dof = self.gym.get_asset_dof_count(exomy_asset)[m
[32m+[m[32m        #print(self.num_dof)[m
[32m+[m[32m        #################################################[m
[32m+[m[32m        # get joint limits and ranges for Franka[m
[32m+[m[32m        exomy_dof_props = self.gym.get_asset_dof_properties(exomy_asset)[m
[32m+[m[32m        exomy_lower_limits = exomy_dof_props["lower"][m
[32m+[m[32m        exomy_upper_limits = exomy_dof_props["upper"][m
[32m+[m[32m        exomy_ranges = exomy_upper_limits - exomy_lower_limits[m
[32m+[m[32m        exomy_mids = 0.5 * (exomy_upper_limits + exomy_lower_limits)[m
[32m+[m[32m        exomy_num_dofs = len(exomy_dof_props)[m
[32m+[m
[32m+[m[32m        #################################################[m
[32m+[m[32m        # set default DOF states[m
[32m+[m[32m        default_dof_state = np.zeros(exomy_num_dofs, gymapi.DofState.dtype)[m
[32m+[m[32m        default_dof_state["pos"] = exomy_mids[m
[32m+[m
[32m+[m
[32m+[m[41m        [m
[32m+[m[32m        exomy_dof_props["driveMode"] = [[m
[32m+[m[32m            gymapi.DOF_MODE_VEL, #0  #LFB bogie[m
[32m+[m[32m            gymapi.DOF_MODE_POS,  #1  #LF POS[m
[32m+[m[32m            gymapi.DOF_MODE_VEL,  #2  #LF DRIVE[m
[32m+[m[32m            gymapi.DOF_MODE_POS,  #3  #LM POS[m
[32m+[m[32m            gymapi.DOF_MODE_VEL,  #4  #LM DRIVE[m
[32m+[m[32m            gymapi.DOF_MODE_VEL, #5  #MRB bogie[m
[32m+[m[32m            gymapi.DOF_MODE_POS,  #6  #LR POS[m
[32m+[m[32m            gymapi.DOF_MODE_VEL,  #7  #LR DRIVE[m
[32m+[m[32m            gymapi.DOF_MODE_POS,  #8  #RR POS[m
[32m+[m[32m            gymapi.DOF_MODE_VEL,  #9  #RR DRIVE[m
[32m+[m[32m            gymapi.DOF_MODE_VEL, #10 #RFB bogie[m
[32m+[m[32m            gymapi.DOF_MODE_POS,  #11 #RF POS[m[41m [m
[32m+[m[32m            gymapi.DOF_MODE_VEL,  #12 #RF DRIVE[m
[32m+[m[32m            gymapi.DOF_MODE_POS,  #13 #RM POS[m
[32m+[m[32m            gymapi.DOF_MODE_VEL,  #14 #RM DRIVE[m
[32m+[m[32m            gymapi.DOF_MODE_VEL,  #15 #SHIT EYE 1[m
[32m+[m[32m            gymapi.DOF_MODE_VEL   #16 #SHIT EYE 2[m
[32m+[m[32m        ][m
[32m+[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m        exomy_dof_props["stiffness"].fill(800.0)[m
[32m+[m[32m        exomy_dof_props["damping"].fill(0.01)[m
[32m+[m[32m        exomy_dof_props["friction"].fill(0.5)[m
[32m+[m[32m        pose = gymapi.Transform()[m
[32m+[m[32m        pose.p.z = 0.2[m
[32m+[m[32m        # asset is rotated z-up by default, no additional rotations needed[m
[32m+[m[32m        pose.r = gymapi.Quat(0.0, 0.0, 1.0, 0.0)[m
[32m+[m
[32m+[m[32m        self.exomy_handles = [][m
[32m+[m[32m        self.envs = [][m
[32m+[m
[32m+[m[32m        self.camera_handles = [][m
[32m+[m[32m        self.cameraheight = 240[m
[32m+[m[32m        self.camerawidth = 424[m
[32m+[m[41m        [m
[32m+[m[32m        #################################################[m
[32m+[m[32m        #Create marker[m
[32m+[m[32m        default_pose = gymapi.Transform()[m
[32m+[m[32m        default_pose.p.z = 0.0[m
[32m+[m[32m        default_pose.p.x = 0.1[m[41m        [m
[32m+[m[32m        marker_options = gymapi.AssetOptions()[m
[32m+[m[32m        marker_options.fix_base_link = True[m
[32m+[m[32m        marker_asset = self.gym.create_sphere(self.sim, 0.1, marker_options)[m
[32m+[m[32m        for i in range(num_envs):[m
[32m+[m[32m            # Create environment[m
[32m+[m[32m            env0 = self.gym.create_env(self.sim, lower, upper, num_per_row)[m
[32m+[m[32m            self.envs.append(env0)[m
[32m+[m
[32m+[m[41m            [m
[32m+[m[32m            exomy0_handle = self.gym.create_actor([m
[32m+[m[32m                env0,  # Environment Handle[m
[32m+[m[32m                exomy_asset,  # Asset Handle[m
[32m+[m[32m                pose,  # Transform of where the actor will be initially placed[m
[32m+[m[32m                "exomy",  # Name of the actor[m
[32m+[m[32m                i,  # Collision group that actor will be part of[m
[32m+[m[32m                1,  # Bitwise filter for elements in the same collisionGroup to mask off collision[m
[32m+[m[32m            )[m
[32m+[m[32m            self.exomy_handles.append(exomy0_handle)[m
[32m+[m
[32m+[m[41m            [m
[32m+[m[41m    [m
[32m+[m[32m            # Configure DOF properties[m
[32m+[m[32m            # Set initial DOF states[m
[32m+[m[32m            # gym.set_actor_dof_states(env0, exomy0_handle, default_dof_state, gymapi.STATE_ALL)[m
[32m+[m[32m            # Set DOF control properties[m
[32m+[m[32m            self.gym.set_actor_dof_properties(env0, exomy0_handle, exomy_dof_props)[m
[32m+[m[32m            #print(self.gym.get_actor_dof_properties((env0, exomy0_handle))[m
[32m+[m
[32m+[m[32m            # Spawn marker[m
[32m+[m[32m            marker_handle = self.gym.create_actor(env0, marker_asset, default_pose, "marker", i, 1, 1)[m
[32m+[m[32m            self.gym.set_rigid_body_color(env0, marker_handle, 0, gymapi.MESH_VISUAL_AND_COLLISION, gymapi.Vec3(1, 0, 0))[m
[32m+[m[41m        [m
[32m+[m[32m        #################################################[m
[32m+[m[32m        # Create camera[m
[32m+[m[32m        camera_props = gymapi.CameraProperties()[m
[32m+[m[32m        camera_props.width = self.camerawidth[m
[32m+[m[32m        camera_props.height = self.cameraheight[m
[32m+[m[32m        camera_props.near_plane = 0.16[m
[32m+[m[32m        camera_props.far_plane = 3[m
[32m+[m[32m        camera_handle = self.gym.create_camera_sensor(env0, camera_props)[m
[32m+[m[32m        self.camera_handles.append(camera_handle)[m
[32m+[m[32m            # Attatch camera to body[m
[32m+[m[32m        body_handle = self.gym.get_actor_rigid_body_handle(env0, exomy0_handle, 18)[m
[32m+[m[32m        local_transform = gymapi.Transform()[m
[32m+[m[32m        local_transform.p = gymapi.Vec3(0,0,0.01) #Units in meters[m
[32m+[m[32m                                                        # tilt,             yaw,                pan[m
[32m+[m[32m        local_transform.r = gymapi.Quat.from_euler_zyx(np.radians(180.0), np.radians(-90.0), np.radians(0.0))[m
[32m+[m[32m        self.gym.attach_camera_to_body(camera_handle, env0, body_handle, local_transform, gymapi.FOLLOW_TRANSFORM)[m
[32m+[m
[32m+[m[32m    def reset_idx(self, env_ids):[m
[32m+[m[32m        # set rotor speeds[m
[32m+[m[41m        [m
[32m+[m[32m        num_resets = len(env_ids)[m
[32m+[m
[32m+[m[32m        target_actor_indices = self.set_targets(env_ids)[m
[32m+[m
[32m+[m[32m        actor_indices = self.all_actor_indices[env_ids, 0].flatten()[m
[32m+[m[32m        #print(self.root_states[0])[m
[32m+[m[32m        self.root_states[env_ids] = self.initial_root_states[env_ids][m
[32m+[m[32m        self.root_states[env_ids, 0] = torch_rand_float(-1.5, 1.5, (num_resets, 1), self.device).flatten()[m
[32m+[m[32m        self.root_states[env_ids, 1] = torch_rand_float(-1.5, 1.5, (num_resets, 1), self.device).flatten()[m
[32m+[m[32m        self.root_states[env_ids, 2] = 0.1#torch_rand_float(-0.2, 1.5, (num_resets, 1), self.device).flatten()[m
[32m+[m[32m        self.dof_states = self.initial_dof_states[m
[32m+[m[32m        self.gym.set_actor_root_state_tensor_indexed(self.sim,self.root_tensor, gymtorch.unwrap_tensor(actor_indices), num_resets)[m
[32m+[m[32m        #print(self.root_states[0])[m
[32m+[m[32m        self.dof_positions = 0[m
[32m+[m[32m        self.gym.set_dof_state_tensor_indexed(self.sim, gymtorch.unwrap_tensor(self.dof_states), gymtorch.unwrap_tensor(actor_indices), num_resets)[m
[32m+[m
[32m+[m[32m        self.reset_buf[env_ids] = 0[m
[32m+[m[32m        self.progress_buf[env_ids] = 0[m
[32m+[m
[32m+[m[32m        return torch.unique(torch.cat([target_actor_indices, actor_indices]))[m
[32m+[m
[32m+[m[32m        #Used to reset a single environment[m
[32m+[m[41m        [m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    def pre_physics_step(self, actions):[m
[32m+[m[32m        #[m[41m [m
[32m+[m[32m        set_target_ids = (self.progress_buf % 1000 == 0).nonzero(as_tuple=False).squeeze(-1)[m
[32m+[m[32m        if  torch.any(self.progress_buf % 1000 == 0):[m
[32m+[m[32m            print(self.marker_positions)[m
[32m+[m[32m        target_actor_indices = torch.tensor([], device=self.device, dtype=torch.int32)[m
[32m+[m[32m        #if len(set_target_ids) > 0:[m
[32m+[m[32m            #target_actor_indices = self.set_targets(set_target_ids)[m
[32m+[m[41m    [m
[32m+[m[32m        reset_env_ids = self.reset_buf.nonzero(as_tuple=False).squeeze(-1)[m
[32m+[m[32m        #print(self.reset_buf)[m
[32m+[m[32m        actor_indices = torch.tensor([], device=self.device, dtype=torch.int32)[m
[32m+[m[32m        #print(reset_env_ids.size())[m
[32m+[m[32m        if len(reset_env_ids) > 0:[m
[32m+[m[32m            actor_indices = self.reset_idx(reset_env_ids)[m
[32m+[m
[32m+[m
[32m+[m[32m        reset_indices = torch.unique(torch.cat([target_actor_indices]))[m
[32m+[m[32m        if len(reset_indices) > 0:[m
[32m+[m[32m            self.gym.set_actor_root_state_tensor_indexed(self.sim, self.root_tensor, gymtorch.unwrap_tensor(reset_indices), len(reset_indices))[m
[32m+[m[32m        # if  (self.progress_buf % 500 == 0).nonzero(as_tuple=False).squeeze(-1):[m
[32m+[m[32m        #     print(self.marker_positions)[m
[32m+[m[32m        #print(self.marker_positions)[m
[32m+[m[32m        #print("exomy")[m
[32m+[m[32m        #print(self.target_root_positions)[m
[32m+[m[32m        actions_tensor = torch.zeros(self.num_envs * self.num_dof, device=self.device, dtype=torch.float)[m
[32m+[m[32m        _actions = actions.to(self.device)[m
[32m+[m
[32m+[m[32m        # actions_tensor[::self.num_dof] = actions.to(self.device).squeeze()[m
[32m+[m[32m        # #print(np.shape(_actions))[m
[32m+[m[32m        #print(np.shape(_actions))[m
[32m+[m[32m        # print(actions.size())[m
[32m+[m
[32m+[m[32m        DRV_LF_joint_dof_handle = self.gym.find_actor_dof_handle(self.envs[0], self.exomy_handles[0], "DRV_LF_joint")[m
[32m+[m[32m        #max = 100[m
[32m+[m[32m        max = 2[m
[32m+[m[32m        #actions_tensor = actions.to(self.device).squeeze() * 400[m
[32m+[m[32m        #pos, vel = self.Kinematics.Get_AckermannValues(1,1)[m
[32m+[m[32m        actions_tensor[1::17]=(_actions[:,0]-0.5) * 2 * self.max_effort_pos  #1  #LF POS[m
[32m+[m[32m        actions_tensor[2::17]=(_actions[:,1]-0.5) * 2 * self.max_effort_vel #2  #LF DRIVE[m
[32m+[m[32m        actions_tensor[3::17]=(_actions[:,2]-0.5) * 2 * self.max_effort_pos #3  #LM POS[m
[32m+[m[32m        actions_tensor[4::17]=(_actions[:,3]-0.5) * 2 * self.max_effort_vel #4  #LM DRIVE[m
[32m+[m[32m        actions_tensor[6::17]=(_actions[:,4]-0.5) * 2 * self.max_effort_pos #6  #LR POS[m
[32m+[m[32m        actions_tensor[7::17]=(_actions[:,5]-0.5) * 2 * self.max_effort_vel #7  #LR DRIVE[m
[32m+[m[32m        actions_tensor[8::17]=(_actions[:,6]-0.5) * 2 * self.max_effort_pos #8  #RR POS[m
[32m+[m[32m        actions_tensor[9::17]=(_actions[:,7]-0.5) * 2 * self.max_effort_vel #9  #RR DRIVE[m
[32m+[m[32m        actions_tensor[11::17]=(_actions[:,8]-0.5) * 2 * self.max_effort_pos #11 #RF POS[m[41m [m
[32m+[m[32m        actions_tensor[12::17]= (_actions[:,9]-0.5) * 2 * self.max_effort_vel #12 #RF DRIVE[m
[32m+[m[32m        actions_tensor[13::17]=(_actions[:,10]-0.5) * 2 * self.max_effort_pos #13 #RM POS[m
[32m+[m[32m        actions_tensor[14::17]=(_actions[:,11]-0.5) * 2 * self.max_effort_vel #14 #RM DRIVE[m
[32m+[m[32m        # actions_tensor[1::17]=pos[0]  #1  #LF POS[m
[32m+[m[32m        # actions_tensor[2::17]=vel[0] #2  #LF DRIVE[m
[32m+[m[32m        # actions_tensor[3::17]=pos[1] #3  #LM POS[m
[32m+[m[32m        # actions_tensor[4::17]=vel[0] #4  #LM DRIVE[m
[32m+[m[32m        # actions_tensor[6::17]=pos[2] #6  #LR POS[m
[32m+[m[32m        # actions_tensor[7::17]=vel[0] #7  #LR DRIVE[m
[32m+[m[32m        # actions_tensor[8::17]=pos[3]#8  #RR POS[m
[32m+[m[32m        # actions_tensor[9::17]=vel[0] #9  #RR DRIVE[m
[32m+[m[32m        # actions_tensor[11::17]=pos[4] #11 #RF POS[m[41m [m
[32m+[m[32m        # actions_tensor[12::17]=vel[0] #12 #RF DRIVE[m
[32m+[m[32m        # actions_tensor[13::17]=pos[5]#13 #RM POS[m
[32m+[m[32m        # actions_tensor[14::17]=vel[0] #14 #RM DRIVE[m
[32m+[m[32m        # speed =10[m
[32m+[m[32m        # actions_tensor[0] = 100 #BOTH REAR DRIVE        # actions_tensor[3] = 0[m
[32m+[m[32m        # actions_tensor[2] = speed[m[41m [m
[32m+[m[32m        # actions_tensor[4] = speed[m[41m [m
[32m+[m[32m        # actions_tensor[7] = speed[m[41m [m
[32m+[m[32m        # actions_tensor[9] = speed[m[41m [m
[32m+[m[32m        # actions_tensor[12] = speed[m
[32m+[m[41m        [m
[32m+[m[32m        # actions_tensor[14] = speed[m
[32m+[m[32m        #[m[41m [m
[32m+[m[32m        self.gym.set_dof_velocity_target_tensor(self.sim, gymtorch.unwrap_tensor(actions_tensor)) #)[m
[32m+[m[32m        self.gym.set_dof_position_target_tensor(self.sim, gymtorch.unwrap_tensor(actions_tensor)) #)[m
[32m+[m[32m        #forces = gymtorch.unwrap_tensor(actions_tensor)[m
[32m+[m[32m        #self.gym.set_dof_actuation_force_tensor(self.sim, forces)[m
[32m+[m[32m        pass[m
[32m+[m[41m        [m
[32m+[m[32m    def post_physics_step(self):[m
[32m+[m[32m        # implement post-physics simulation code here[m
[32m+[m[32m        #    - e.g. compute reward, compute observations[m
[32m+[m[32m        self.progress_buf += 1[m
[32m+[m
[32m+[m[32m        self.gym.refresh_actor_root_state_tensor(self.sim)[m
[32m+[m[32m        self.gym.refresh_dof_state_tensor(self.sim)[m
[32m+[m[32m        #print(self.vec_root_tensor)[m
[32m+[m[32m        self.compute_observations()[m
[32m+[m[32m        self.compute_rewards()[m
[32m+[m
[32m+[m[32m                # Get Image[m
[32m+[m[32m        environment = self.envs[0][m
[32m+[m[32m        camera = self.camera_handles[0][m
[32m+[m
[32m+[m[32m        points = [][m
[32m+[m[32m        pcd = o3d.geometry.PointCloud()[m
[32m+[m
[32m+[m[32m        if self.frame_count == 4: # Don't do this every frame, demanding[m
[32m+[m[32m            self.gym.render_all_camera_sensors(self.sim)[m
[32m+[m[32m            print("camera render ", self.gym.render_all_camera_sensors(self.sim))[m
[32m+[m
[32m+[m[32m            #depth_buffer = self.gym.get_camera_image(self.sim, environment, camera, gymapi.IMAGE_DEPTH)[m
[32m+[m[32m            #self.gym.get_camera_image(self.sim, environment, camera, gymapi.IMAGE_COLOR)[m
[32m+[m[32m            #rgb_filename1 = "color_cam.png"[m
[32m+[m[32m            #rgb_filename2 = "depth_cam.png"[m
[32m+[m[32m            #self.gym.write_camera_image_to_file(self.sim, environment, camera, gymapi.IMAGE_COLOR, rgb_filename1)[m
[32m+[m[32m            #self.gym.write_camera_image_to_file(self.sim, environment, camera, gymapi.IMAGE_DEPTH, rgb_filename2)[m
[32m+[m[41m        [m
[32m+[m[32m            # Get the camera view matrix and invert it to transform points from camera to world space[m
[32m+[m[32m            #vinv = np.linalg.inv(np.matrix(self.gym.get_camera_view_matrix(self.sim, environment, camera)))[m
[32m+[m
[32m+[m[32m            # Get the camera projection matrix and get the necessary scaling[m
[32m+[m[32m            # coefficients for deprojection[m
[32m+[m[32m            # proj = self.gym.get_camera_proj_matrix(self.sim, environment, camera)[m
[32m+[m[32m            # fu = 2/proj[0, 0][m
[32m+[m[32m            # fv = 2/proj[1, 1][m
[32m+[m[41m            [m
[32m+[m[32m            # centerU = self.camerawidth/2[m
[32m+[m[32m            # centerV = self.cameraheight/2[m
[32m+[m
[32m+[m[32m            # for i in range(self.camerawidth):[m[41m [m
[32m+[m[32m            #     for j in range(self.cameraheight):[m
[32m+[m[32m            #         if depth_buffer[j, i] != -inf: # ignore empty space[m[41m [m
[32m+[m[32m            #             u = -(i-centerU)/(self.camerawidth)  # image-space coordinate[m
[32m+[m[32m            #             v = (j-centerV)/(self.cameraheight)  # image-space coordinate[m
[32m+[m[32m            #             d = depth_buffer[j, i]  # depth buffer value[m
[32m+[m[32m            #             X2 = [d*fu*u, d*fv*v, d, 1]  # deprojection vector[m
[32m+[m[32m            #             p2 = X2*vinv  # Inverse camera view to get world coordinates[m
[32m+[m[32m            #             points.append([p2[0, 0], p2[0, 1], p2[0, 2]])[m
[32m+[m[32m            # self.frame_count = 0[m
[32m+[m[32m            # pcd.points = o3d.utility.Vector3dVector(np.array(points))[m
[32m+[m[32m            # #o3d.visualization.draw_geometries([pcd]) #Print point cloud[m
[32m+[m[41m           [m
[32m+[m[32m        self.frame_count = self.frame_count +1[m
[32m+[m
[32m+[m[32m    def compute_observations(self):[m
[32m+[m[32m        self.obs_buf[..., 0:3] = (self.target_root_positions - self.root_positions) / 3[m
[32m+[m[32m        self.obs_buf[..., 3:7] = self.root_quats[m
[32m+[m[32m        self.obs_buf[..., 7:10] = self.root_linvels / 2[m
[32m+[m[32m        self.obs_buf[..., 10:13] = self.root_angvels / math.pi[m
[32m+[m[32m        return self.obs_buf[m
[32m+[m
[32m+[m
[32m+[m[32m    def compute_rewards(self):[m
[32m+[m[32m        self.rew_buf[:], self.reset_buf[:] = compute_exomy_reward([m
[32m+[m[32m            self.root_positions,[m
[32m+[m[32m            self.target_root_positions,[m
[32m+[m[32m            self.reset_buf, self.progress_buf, self.max_episode_length)[m[41m        [m
[32m+[m
[32m+[m[32m@torch.jit.script[m
[32m+[m[32mdef compute_exomy_reward(root_positions, target_root_positions, reset_buf, progress_buf, max_episode_length):[m
[32m+[m[32m    # type: (Tensor, Tensor, Tensor, Tensor, float) -> Tuple[Tensor, Tensor][m
[32m+[m[32m    # distance to target[m
[32m+[m[32m    target_dist = torch.sqrt(torch.square(target_root_positions - root_positions).sum(-1))[m
[32m+[m[32m    pos_reward = 1.0 / (1.0 + target_dist * target_dist)[m
[32m+[m
[32m+[m[32m    reward = pos_reward[m
[32m+[m[32m    #print(reward[0:5])[m
[32m+[m[32m    ones = torch.ones_like(reset_buf)[m
[32m+[m[32m    die = torch.zeros_like(reset_buf)[m
[32m+[m[32m    # resets due to episode length[m
[32m+[m[32m    reset = torch.where(progress_buf >= max_episode_length - 1, ones, die)[m
[32m+[m[32m    return reward, reset[m[41m        [m
